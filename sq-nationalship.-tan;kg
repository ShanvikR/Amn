DROP TABLE IF EXISTS PT;

-- shipment vs destination postal code 

create temp table PT AS (

select distinct
shipment_id, -- completed_shipment_id
destination_postal_code as dest_postal_code

from (select
exsd.shipment_id,
exsd.destination_postal_code
from atrops_ddl.o_notify_exsd_packages exsd
where exsd.region_id = 2
and exsd.request_date > Current_date - 90

union

select 
dosp.fulfillment_shipment_id,
dosp.shipping_address_postal_code
from scap.d_outbound_shipment_data dosp
where dosp.region_id = 4 
and dosp.marketplace_id = 44571
and dosp.ship_day > Current_date - 90)

where shipment_id is not null

); -- PT


DROP TABLE IF EXISTS T5;


create temp table T5 AS (

select distinct 
dr.removal_order_id,
dr.removal_disposition,
dr.distributor_id,
PT.dest_postal_code as destination_postal_code


From booker.d_distributor_returns dr

left join PT
on dr.completed_shipment_id = PT.shipment_id

where dr.creation_date >= Current_date - 90
AND dr.condition = 8   -- Shipped
AND dr.legal_entity_id = '131'


);  -- T5

DROP TABLE IF EXISTS T4;


create temp table T4 AS (

select removal_order_id, 
trunc(order_creation_date) as creation_date,
sum(refund_amount) as refund_amount

from scap.d_daily_proactive
where order_creation_date > Current_date - 90
AND latest_status != 'Not_shipped'

group by 1,2

); -- T4

DROP TABLE IF EXISTS T1;

create temp table T1 AS (

select T5.*,
T4.creation_date,
T4.refund_amount

from T5 

left join T4
on T5.removal_order_id = T4.removal_order_id
where destination_postal_code is not null

);  -- T1

DROP TABLE IF EXISTS T2;

create temp table T2 AS (

Select distinct 

pincode_src, 
pincode_dst, 
MAX(distance_in_km) as distance_in_km


from ( 

Select pincode_src, 
pincode_dst, 
distance_in_km

from scap.d_pincode_distance_mx_in

UNION ALL

Select pincode_src, 
pincode_dst, 
distance_in_km

from scap.d_pin_distance

UNION ALL

Select pincode_src, 
pincode_dst, 
distance_in_km

from scap.d_pincode_distance_in  )


group by 1,2

);  -- T2

DROP TABLE IF EXISTS T3;

create temp table T3 AS (

select distinct
trunc(T1.creation_date) as creation_date,
extract(YEAR from T1.creation_date) as order_year,
extract(MONTH from T1.creation_date) as order_month,
extract(WEEK from T1.creation_date) as order_week,
rc.warehouse_id,
wh.pincode AS warehouse_pincode,
case when rc.inventory_owner_group_id = '88' then 'CloudTail'
when rc.inventory_owner_group_id = '87' then 'Appario'
when rc.inventory_owner_group_id = '89' then 'Aripl'
when rc.inventory_owner_group_id IN ('104','105','107')  then 'PD'
else 'FBA' end as IOG,
T1.removal_disposition,
-- rc.removal_disposition_code,
-- rc.gl_product_group,
gl.glpg_text as gl,
rc.removal_order_id,
-- rc.destination_distributor_id,
T1.distributor_id,
T1.destination_postal_code,
T1.refund_amount,
sum(rc.quantity) as removal_qty,
sum(rc.quantity*rc.cost) as Total_cost,
sum(rc.quantity*rc.refund_amount) as Total_refund

from removalexecution_ddl_ext.o_removal_candidates rc

inner join T1
on rc.removal_order_id = T1.removal_order_id

left join scap.d_warehouses_summary wh
on rc.warehouse_id = wh.WAREHOUSE_ID

left join athena_schema.d_glcode gl
on rc.gl_product_group = gl.glpg

where T1.creation_date >= Current_date - 90
-- and rc.region_id = 4
-- and rc.removal_order_id in ('3537024411','3538015951')

group by 1,2,3,4,5,6,7,8,9,10,11,12,13
); -- T3

select T3.order_year,
T3.order_month,
T3.order_week,
T3.warehouse_id,
T3.iog,
T3.removal_disposition,
T3.gl,
case when T2.distance_in_km >= 0 and T2.distance_in_km <= 80 then 'Local (<80 Km)'
when T2.distance_in_km > 80 and T2.distance_in_km <=350 then 'Regional  (80-350 Km)'
when T2.distance_in_km > 350 then 'National (>350Km)'
else 'NA' end as Category,
sum(T3.removal_qty) as removal_qty,
sum(T3.Total_refund) as Total_refund

from T3
left join T2
on T3.warehouse_pincode = T2.pincode_src
and T3.destination_postal_code = T2.pincode_dst

-- where T3.order_week in ('40','41','42','43','44','45','46')

group by 1,2,3,4,5,6,7,8
